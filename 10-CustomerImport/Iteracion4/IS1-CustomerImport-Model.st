Object subclass: #Address	instanceVariableNames: 'id streetName streetNumber town zipCode province'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:13'!zipCode	^zipCode! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:08'!zipCode: aZipCode 	zipCode := aZipCode! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:07'!town: aTown 	town := aTown! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:12'!town	^town! !!Address methodsFor: 'testing' stamp: 'HernanWilkinson 11/1/2016 10:06'!isAt: aStreetName	^streetName = aStreetName ! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:11'!province	^province! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:08'!province: aProvince 	province := aProvince	! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetNumber: aStreetNumber 	streetNumber := aStreetNumber ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetName	^streetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetName: aStreetName 	streetName := aStreetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetNumber	^streetNumber ! !Object subclass: #Customer	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 11/1/2016 09:43'!numberOfAddresses		^addresses size! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 11/1/2016 18:03'!addressesIsEmpty		^addresses isEmpty! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:27'!addAddress: anAddress 	addresses add: anAddress ! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:25'!addresses	^ addresses! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 11/1/2016 10:05'!addressAt: aStreetName ifNone: noneClosure 		^addresses detect: [ :anAddress | anAddress isAt: aStreetName ] ifNone: noneClosure ! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 11/4/2016 09:42'!isIdentifiedAs: anIdType numbered: anIdNumber 		^identificationType = anIdType and: [ identificationNumber = anIdNumber  ]! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationType		^identificationType ! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 13:10'!identificationType: anIdentificationType 	identificationType := anIdentificationType! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationNumber		^identificationNumber ! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 13:10'!identificationNumber: anIdentificationNumber 	identificationNumber := anIdentificationNumber! !!Customer methodsFor: 'initialization' stamp: 'HernanWilkinson 10/28/2016 13:26'!initialize	super initialize.	addresses := OrderedCollection new.! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!firstName: aName 	firstName := aName! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!lastName: aLastName 	lastName := aLastName! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!lastName	^lastName ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!firstName		^firstName ! !TestCase subclass: #CustomerImportTest	instanceVariableNames: 'importer system'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CustomerImportTest methodsFor: 'importing' stamp: 'DamianSilvani 7/2/2018 17:18'!importCustomersFrom: inputStream	(CustomerImporter from: inputStream using: system) import! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'DamianSilvani 7/2/2018 17:12'!setUp	system := Environment current createErpSystem.	system start.	system beginTransaction! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'HernanWilkinson 11/4/2016 09:52'!tearDown	system commit.	system shutdown! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 11:00'!assert: customer hasAddressAt: streetName number: streetNumber in: town zipCode: zipCode province: province	| address |		address := customer addressAt: streetName ifNone: [ self fail ].	self assert: address streetName equals: streetName.	self assert: address streetNumber equals: streetNumber.	self assert: address town equals: town.	self assert: address zipCode equals: zipCode.	self assert: address province equals: province.	! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 10:56'!assert: customer isNamed: firstName lastName: lastName identfiedAs: idType withNumber: idNumber andNumberOfAddresses: addressesSize	self assert: customer firstName equals: firstName.	self assert: customer lastName equals: lastName.	self assert: customer identificationType equals: idType.	self assert: customer identificationNumber equals: idNumber.	self assert: customer numberOfAddresses equals: addressesSize .! !!CustomerImportTest methodsFor: 'asserting' stamp: 'DamianSilvani 7/2/2018 17:22'!assertJuanPerezWasImportedCorrectly	| customer idType idNumber |	idType := 'C'.	idNumber := '23-25666777-9'.	customer := system customerSystem customerIdentifiedAs: idType numbered: idNumber.	self		assert: customer		isNamed: 'Juan'		lastName: 'Perez'		identfiedAs: idType		withNumber: idNumber		andNumberOfAddresses: 1.	self		assert: customer		hasAddressAt: 'Alem'		number: 1122		in: 'CABA'		zipCode: 1001		province: 'CABA'! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/3/2016 09:20'!assertPepeSanchezWasImportedCorrectly	| customer |	customer := self alwaysImportedCustomer. 		self assert: customer isNamed: 'Pepe' lastName: 'Sanchez' identfiedAs: self alwaysImportedCustomerIdType withNumber: self alwaysImportedCustomerIdNumber andNumberOfAddresses: 2.	self assert: customer hasAddressAt: 'San Martin' number: 3322 in: 'Olivos' zipCode: 1636 province: 'BsAs'.	self assert: customer hasAddressAt: 'Maipu' number: 888 in: 'Florida' zipCode: 1122 province: 'Buenos Aires'! !!CustomerImportTest methodsFor: 'asserting' stamp: 'DamianSilvani 7/2/2018 17:20'!assertImportedCustomersSizeIsCorrect	self assert: system customerSystem allCustomers size equals: 2! !!CustomerImportTest methodsFor: 'test data' stamp: 'DamianSilvani 7/1/2018 22:53'!dataWithEmptyLine		^ ReadStream on: self alwaysImportedNewCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'test data' stamp: 'DamianSilvani 7/1/2018 22:53'!validTestData	^ ReadStream on: self alwaysImportedNewCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'DamianSilvani 7/1/2018 22:53'!newCustomerRecordWithMoreThanFiveFieldsTestData		^ ReadStream on: self alwaysImportedNewCustomerRecord,',x'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'DamianSilvani 7/2/2018 17:19'!customerRecordStartingWithMoreThanOneSTestData		^ ReadStream on:'CC,Pepe,Sanchez,D,22333444'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:46'!alwaysImportedCustomerIdType	^ 'D'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'DamianSilvani 7/1/2018 22:50'!newCustomerRecordWithLessThanFiveFieldsTestData		^ ReadStream on: 'C,Pepe,Sanchez,D'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'DamianSilvani 7/1/2018 22:53'!alwaysImportedNewCustomerRecord	^ 'C,Pepe,Sanchez,', self alwaysImportedCustomerIdType, ',', self alwaysImportedCustomerIdNumber ! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:47'!alwaysImportedCustomerIdNumber	^ '22333444'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'DamianSilvani 7/2/2018 17:14'!alwaysImportedCustomer	| anIdentificationNumber anIdentifycationType |	anIdentifycationType := self alwaysImportedCustomerIdType.	anIdentificationNumber := self alwaysImportedCustomerIdNumber.	^ system customerSystem		customerIdentifiedAs: anIdentifycationType		numbered: anIdentificationNumber! !!CustomerImportTest methodsFor: 'testing' stamp: 'DamianSilvani 7/2/2018 17:18'!testImportCustomers	self importCustomersFrom: self validTestData.	self assertImportedCustomersSizeIsCorrect.	self assertPepeSanchezWasImportedCorrectly.	self assertJuanPerezWasImportedCorrectly! !!CustomerImportTest methodsFor: 'testing' stamp: 'DamianSilvani 7/2/2018 17:18'!testCanNotImportAddressWithoutSupplier	self		should: [ self importCustomersFrom: self addressWithoutCustomerTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter addressWithoutSupplierErrorDescription.			self assert: system customerSystem customersIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'DamianSilvani 7/2/2018 17:18'!testEmptyLinesAreRecognizedAsInvalidRecords		self		should: [ self importCustomersFrom: self dataWithEmptyLine ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'DamianSilvani 7/2/2018 17:18'!testCanNotImportNewCustomerRecordWithLessThanFiveFields	self		should: [ self				importCustomersFrom: self newCustomerRecordWithLessThanFiveFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidSupplierRecordErrorDescription.			self assert: system customerSystem customersIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'DamianSilvani 7/2/2018 17:18'!testShouldNotImportAddressRecordsStartingWithMoreThanA	self 		should: [ self importCustomersFrom: self addressRecordStartingWithMoreThanOneATestData ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]	! !!CustomerImportTest methodsFor: 'testing' stamp: 'DamianSilvani 7/2/2018 17:22'!testShouldNotImportSupplierRecordsStartingWithMoreThanC	self		should: [ self				importCustomersFrom: self customerRecordStartingWithMoreThanOneSTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: system customerSystem customersIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'DamianSilvani 7/2/2018 17:18'!testCanNotImportAddressRecordWithLessThanSixFields		self		should: [ self importCustomersFrom: self addressRecordWithLessThanSixFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidAddressRecordErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'DamianSilvani 7/2/2018 17:18'!testCanNotImportNewCustomerRecordWithMoreThanFiveFields	self		should: [ self				importCustomersFrom: self newCustomerRecordWithMoreThanFiveFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidSupplierRecordErrorDescription.			self assert: system customerSystem customersIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'DamianSilvani 7/2/2018 17:18'!testCanNotImportAddressRecordWithMoreThanSixFields	self 		should: [ self importCustomersFrom: self addressRecordWithMoreThanSixFieldsTestData ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidAddressRecordErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]	! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'DamianSilvani 7/1/2018 22:53'!addressRecordStartingWithMoreThanOneATestData		^ ReadStream on: self alwaysImportedNewCustomerRecord,'AA,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/1/2016 15:59'!addressWithoutCustomerTestData		^ ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'DamianSilvani 7/1/2018 22:53'!addressRecordWithMoreThanSixFieldsTestData		^ ReadStream on: self alwaysImportedNewCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAs,y otra cosa'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'DamianSilvani 7/1/2018 22:53'!addressRecordWithLessThanSixFieldsTestData		^ ReadStream on: self alwaysImportedNewCustomerRecord,'A,San Martin,3322,Olivos,1636'! !Object subclass: #CustomerImporter	instanceVariableNames: 'line readStream record newCustomer system'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CustomerImporter methodsFor: 'initialization' stamp: 'HernanWilkinson 11/4/2016 09:26'!initializeOn: aReadStream using: aCustomerSystem	readStream := aReadStream.	system := aCustomerSystem! !!CustomerImporter methodsFor: 'importing - private' stamp: 'HernanWilkinson 11/2/2016 15:54'!convertLineToRecord	record := line substrings: {$,}.		self assertRecordNotEmpty! !!CustomerImporter methodsFor: 'importing - private' stamp: 'HernanWilkinson 11/1/2016 17:52'!importRecord		self isCustomerRecord ifTrue: [ ^self importCustomer ].	self isAddressRecord ifTrue: [ ^self importAddress ].		self signalInvalidRecordType! !!CustomerImporter methodsFor: 'importing - private' stamp: 'HernanWilkinson 11/2/2016 10:55'!canImportNextLine	line := readStream nextLine.	^ line notNil! !!CustomerImporter methodsFor: 'importing - private' stamp: 'HernanWilkinson 11/2/2016 15:55'!assertRecordNotEmpty		record isEmpty ifTrue: [ self signalInvalidRecordType ]! !!CustomerImporter methodsFor: 'importing' stamp: 'HernanWilkinson 11/1/2016 17:51'!import	[ self canImportNextLine ] whileTrue: [ 		self convertLineToRecord.		self importRecord ]! !!CustomerImporter methodsFor: 'importing - private - address' stamp: 'HernanWilkinson 11/2/2016 10:57'!assertValidAddressRecordSize		record size ~= 6 ifTrue: [ self signalInvalidAddressRecord ].	! !!CustomerImporter methodsFor: 'importing - private - address' stamp: 'DamianSilvani 7/1/2018 22:42'!importAddress	| newAddress |	self assertThereIsSupplierForAddress.	self assertValidAddressRecordSize.		newAddress := Address new.	newAddress streetName: record second.	newAddress streetNumber: record third asInteger.	newAddress town: record fourth.	newAddress zipCode: record fifth asInteger.	newAddress province: record sixth.	^ newCustomer addAddress: newAddress! !!CustomerImporter methodsFor: 'importing - private - address' stamp: 'HernanWilkinson 11/2/2016 10:55'!isAddressRecord	^ record first = 'A'! !!CustomerImporter methodsFor: 'importing - private - address' stamp: 'DamianSilvani 7/1/2018 22:43'!assertThereIsSupplierForAddress	newCustomer isNil ifTrue: [ self signalAddressWithoutSupplierError ].	! !!CustomerImporter methodsFor: 'importing - private - customer' stamp: 'DamianSilvani 7/1/2018 22:58'!assertValidNewCustomerRecordSize		record size ~= 5 ifTrue: [ self signalInvalidSupplierRecord ].	! !!CustomerImporter methodsFor: 'importing - private - customer' stamp: 'HernanWilkinson 11/2/2016 10:55'!isCustomerRecord	^ record first = 'C'! !!CustomerImporter methodsFor: 'importing - private - customer' stamp: 'DamianSilvani 7/2/2018 17:14'!importCustomer	self assertValidNewCustomerRecordSize.	newCustomer := Customer new.	newCustomer firstName: record second.	newCustomer lastName: record third.	newCustomer identificationType: record fourth.	newCustomer identificationNumber: record fifth.	system customerSystem add: newCustomer! !!CustomerImporter methodsFor: 'error signal' stamp: 'DamianSilvani 7/1/2018 22:44'!signalAddressWithoutSupplierError	self error: self class addressWithoutSupplierErrorDescription.! !!CustomerImporter methodsFor: 'error signal' stamp: 'DamianSilvani 7/1/2018 22:44'!signalInvalidSupplierRecord 		self error: self class invalidSupplierRecordErrorDescription ! !!CustomerImporter methodsFor: 'error signal' stamp: 'HernanWilkinson 11/1/2016 17:54'!signalInvalidRecordType	self error: self class invalidRecordTypeErrorDescription! !!CustomerImporter methodsFor: 'error signal' stamp: 'HernanWilkinson 11/1/2016 18:01'!signalInvalidAddressRecord 		self error: self class invalidAddressRecordErrorDescription ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CustomerImporter class	instanceVariableNames: ''!!CustomerImporter class methodsFor: 'instance creation' stamp: 'HernanWilkinson 11/4/2016 09:27'!from: aReadStream using: aCustomerSystem	^ self new initializeOn: aReadStream using: aCustomerSystem! !!CustomerImporter class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 11/1/2016 17:54'!invalidRecordTypeErrorDescription		^'Invalid record type'! !!CustomerImporter class methodsFor: 'error descriptions' stamp: 'DamianSilvani 7/1/2018 22:44'!addressWithoutSupplierErrorDescription		^'There is no Customer for the imported address'! !!CustomerImporter class methodsFor: 'error descriptions' stamp: 'DamianSilvani 7/1/2018 22:44'!invalidSupplierRecordErrorDescription		^'Invalid customer record'! !!CustomerImporter class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 11/1/2016 18:00'!invalidAddressRecordErrorDescription		^'Invalid address record'! !Object subclass: #CustomerSystem	instanceVariableNames: 'erpSystem'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CustomerSystem methodsFor: 'transaction' stamp: 'HernanWilkinson 11/4/2016 09:35'!beginTransaction	self subclassResponsibility! !!CustomerSystem methodsFor: 'transaction' stamp: 'DamianSilvani 7/2/2018 14:43'!initializeOn: anErpSystem	erpSystem := anErpSystem! !!CustomerSystem methodsFor: 'transaction' stamp: 'HernanWilkinson 11/4/2016 09:35'!commit	self subclassResponsibility! !!CustomerSystem methodsFor: 'system live cycle' stamp: 'HernanWilkinson 11/4/2016 09:52'!shutdown	self subclassResponsibility! !!CustomerSystem methodsFor: 'system live cycle' stamp: 'HernanWilkinson 11/4/2016 09:51'!start	self subclassResponsibility! !!CustomerSystem methodsFor: 'customers' stamp: 'HernanWilkinson 11/4/2016 09:35'!add: aCustomer	self subclassResponsibility! !!CustomerSystem methodsFor: 'customers' stamp: 'DamianSilvani 7/2/2018 17:16'!customersIsEmpty	self subclassResponsibility! !!CustomerSystem methodsFor: 'customers' stamp: 'DamianSilvani 7/2/2018 17:21'!allCustomers	self subclassResponsibility! !!CustomerSystem methodsFor: 'customers' stamp: 'HernanWilkinson 11/4/2016 09:35'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber	self subclassResponsibility! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CustomerSystem class	instanceVariableNames: ''!!CustomerSystem class methodsFor: 'instance creation' stamp: 'DamianSilvani 7/2/2018 14:43'!on: anErpSystem	^self new initializeOn: anErpSystem! !Object subclass: #Environment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Environment methodsFor: 'as yet unclassified' stamp: 'DamianSilvani 7/1/2018 21:03'!createErpSystem	self subclassResponsibility! !!Environment methodsFor: 'system creation' stamp: 'HernanWilkinson 11/4/2016 09:49'!createCustomerSystem	self subclassResponsibility ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Environment class	instanceVariableNames: ''!!Environment class methodsFor: 'enviroment selection' stamp: 'HernanWilkinson 11/4/2016 09:46'!current		^self allSubclasses 		detect: [ :anEnvironemntClass | anEnvironemntClass isCurrent ]		ifFound: [ :anEnvironmentClass | anEnvironmentClass new ]		ifNone: [ self error: 'No environment detected' ]! !!Environment class methodsFor: 'enviroment selection' stamp: 'HernanWilkinson 11/4/2016 09:49'!isCurrent	self subclassResponsibility ! !Environment subclass: #DevelpmentEnvironment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!DevelpmentEnvironment methodsFor: 'as yet unclassified' stamp: 'HernanWilkinson 11/4/2016 09:47'!createCustomerSystem		^TransientCustomerSystem new! !!DevelpmentEnvironment methodsFor: 'as yet unclassified' stamp: 'DamianSilvani 7/1/2018 21:04'!createErpSystem	^TransientErpSystem new! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DevelpmentEnvironment class	instanceVariableNames: ''!!DevelpmentEnvironment class methodsFor: 'as yet unclassified' stamp: 'HernanWilkinson 11/4/2016 09:47'!isCurrent		^IntegrationEnvironment isCurrent not! !Object subclass: #ErpSystem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!ErpSystem methodsFor: 'system live cycle' stamp: 'DamianSilvani 7/2/2018 14:37'!supplierSystem	self subclassResponsibility! !!ErpSystem methodsFor: 'system live cycle' stamp: 'DamianSilvani 7/1/2018 21:25'!shutdown	self subclassResponsibility! !!ErpSystem methodsFor: 'system live cycle' stamp: 'DamianSilvani 7/1/2018 21:25'!start	self subclassResponsibility! !!ErpSystem methodsFor: 'system live cycle' stamp: 'DamianSilvani 7/2/2018 14:37'!customerSystem	self subclassResponsibility! !!ErpSystem methodsFor: 'transaction' stamp: 'DamianSilvani 7/1/2018 21:25'!beginTransaction	self subclassResponsibility! !!ErpSystem methodsFor: 'transaction' stamp: 'DamianSilvani 7/1/2018 21:25'!commit	self subclassResponsibility! !Environment subclass: #IntegrationEnvironment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!IntegrationEnvironment methodsFor: 'as yet unclassified' stamp: 'HernanWilkinson 11/4/2016 09:45'!createCustomerSystem		^PersistentCustomerSystem new! !!IntegrationEnvironment methodsFor: 'as yet unclassified' stamp: 'DamianSilvani 7/1/2018 21:04'!createErpSystem	^PersistentErpSystem new! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!IntegrationEnvironment class	instanceVariableNames: ''!!IntegrationEnvironment class methodsFor: 'as yet unclassified' stamp: 'HernanWilkinson 11/4/2016 09:47'!not	self shouldBeImplemented.! !!IntegrationEnvironment class methodsFor: 'testing' stamp: 'DamianSilvani 7/2/2018 17:36'!isCurrent		^false! !CustomerSystem subclass: #PersistentCustomerSystem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!PersistentCustomerSystem methodsFor: 'transaction' stamp: 'DamianSilvani 7/2/2018 14:44'!beginTransaction	erpSystem session beginTransaction! !!PersistentCustomerSystem methodsFor: 'transaction' stamp: 'DamianSilvani 7/2/2018 14:44'!commit	erpSystem session commit! !!PersistentCustomerSystem methodsFor: 'customers' stamp: 'DamianSilvani 7/2/2018 14:44'!add: aCustomer	erpSystem session persist: aCustomer! !!PersistentCustomerSystem methodsFor: 'customers' stamp: 'DamianSilvani 7/2/2018 17:21'!allCustomers	^ erpSystem session selectAllOfType: Customer! !!PersistentCustomerSystem methodsFor: 'customers' stamp: 'DamianSilvani 7/2/2018 17:21'!customersIsEmpty	^ self allCustomers isEmpty! !!PersistentCustomerSystem methodsFor: 'customers' stamp: 'DamianSilvani 7/2/2018 14:44'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber	| customers |	customers := erpSystem session		select: [ :aCustomer | 			aCustomer identificationType = anIdentifycationType				and: [ aCustomer identificationNumber = anIdentificationNumber ] ]		ofType: Customer.	customers size = 1		ifFalse: [ self error: 'No o more that one customer found' ].	^ customers anyOne! !!PersistentCustomerSystem methodsFor: 'system live cycle' stamp: 'DamianSilvani 7/2/2018 14:44'!shutdown	erpSystem session shutdown! !!PersistentCustomerSystem methodsFor: 'system live cycle' stamp: 'DamianSilvani 7/2/2018 14:44'!start	erpSystem session start! !ErpSystem subclass: #PersistentErpSystem	instanceVariableNames: 'session customerSystem supplierSystem'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!PersistentErpSystem methodsFor: 'transaction' stamp: 'DamianSilvani 7/2/2018 14:37'!beginTransaction	session beginTransaction! !!PersistentErpSystem methodsFor: 'transaction' stamp: 'DamianSilvani 7/2/2018 14:37'!commit	session commit! !!PersistentErpSystem methodsFor: 'system live cycle' stamp: 'DamianSilvani 7/2/2018 14:37'!shutdown	session shutdown! !!PersistentErpSystem methodsFor: 'system live cycle' stamp: 'DamianSilvani 7/2/2018 14:42'!start	session start.	supplierSystem := PersistentSupplierSystem on: self.	customerSystem := PersistentCustomerSystem on: self.		! !!PersistentErpSystem methodsFor: 'initialization' stamp: 'DamianSilvani 7/2/2018 14:37'!initialize		super initialize.	self initializeSession. ! !!PersistentErpSystem methodsFor: 'initialization' stamp: 'DamianSilvani 7/2/2018 17:31'!initializeSession	session := DataBaseSession		for: (Array with: self addressMapping						with: self customerMapping						with: self supplierMapping)! !!PersistentErpSystem methodsFor: 'mapping' stamp: 'DamianSilvani 7/2/2018 14:37'!supplierSystem	^supplierSystem! !!PersistentErpSystem methodsFor: 'mapping' stamp: 'DamianSilvani 7/2/2018 14:37'!customerMapping	^ ClassMapping		withDefaultTableNameFor: Customer		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #firstName)				with: (EmbededMapping withDefaultFieldNameFor: #lastName)				with: (EmbededMapping withDefaultFieldNameFor: #identificationType)				with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)				with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address))! !!PersistentErpSystem methodsFor: 'mapping' stamp: 'DamianSilvani 7/2/2018 17:28'!supplierMapping	^ ClassMapping		withDefaultTableNameFor: Supplier		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #name)				with: (EmbededMapping withDefaultFieldNameFor: #identificationType)				with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)				with: (OneToManyMapping withDefaultFieldNameFor: #customers ofType: Customer)				with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address))! !!PersistentErpSystem methodsFor: 'mapping' stamp: 'DamianSilvani 7/2/2018 14:37'!addressMapping	^ ClassMapping		withDefaultTableNameFor: Address		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #streetName)				with: (EmbededMapping withDefaultFieldNameFor: #streetNumber)				with: (EmbededMapping withDefaultFieldNameFor: #town)				with: (EmbededMapping withDefaultFieldNameFor: #zipCode)				with: (EmbededMapping withDefaultFieldNameFor: #province))! !!PersistentErpSystem methodsFor: 'mapping' stamp: 'DamianSilvani 7/2/2018 14:38'!customerSystem	^customerSystem! !!PersistentErpSystem methodsFor: 'customers' stamp: 'DamianSilvani 7/2/2018 17:13'!session	^session! !Object subclass: #Supplier	instanceVariableNames: 'id name identificationType identificationNumber addresses customers'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Supplier methodsFor: 'accessing' stamp: 'DamianSilvani 7/1/2018 22:40'!name: anObject	name := anObject! !!Supplier methodsFor: 'accessing' stamp: 'DamianSilvani 7/1/2018 22:40'!identificationType	^ identificationType! !!Supplier methodsFor: 'accessing' stamp: 'DamianSilvani 7/1/2018 22:40'!name	^ name! !!Supplier methodsFor: 'accessing' stamp: 'DamianSilvani 7/1/2018 22:40'!identificationType: anObject	identificationType := anObject! !!Supplier methodsFor: 'accessing' stamp: 'DamianSilvani 7/1/2018 22:40'!identificationNumber	^ identificationNumber! !!Supplier methodsFor: 'accessing' stamp: 'DamianSilvani 7/1/2018 22:40'!identificationNumber: anObject	identificationNumber := anObject! !!Supplier methodsFor: 'accessing' stamp: 'DamianSilvani 7/1/2018 23:01'!initialize	addresses := OrderedCollection new.	customers := OrderedCollection new! !!Supplier methodsFor: 'as yet unclassified' stamp: 'DamianSilvani 7/1/2018 22:45'!isIdentifiedAs: anIdType numbered: anIdNumber 	^identificationType = anIdType and: [ identificationNumber = anIdNumber ]! !!Supplier methodsFor: 'as yet unclassified' stamp: 'DamianSilvani 7/1/2018 23:01'!customersIsEmpty	^customers isEmpty! !!Supplier methodsFor: 'as yet unclassified' stamp: 'DamianSilvani 7/1/2018 22:46'!addressesIsEmpty	^ addresses isEmpty! !!Supplier methodsFor: 'as yet unclassified' stamp: 'DamianSilvani 7/1/2018 23:22'!addAddress: anAddress 	addresses add: anAddress! !!Supplier methodsFor: 'as yet unclassified' stamp: 'DamianSilvani 7/1/2018 23:15'!addCustomer: aCustomer 	customers add: aCustomer! !!Supplier methodsFor: 'as yet unclassified' stamp: 'DamianSilvani 7/1/2018 23:25'!addressAt: aStreetName ifNone: aBlockClosure 	^addresses detect: [ :anAddress | anAddress isAt: aStreetName ] ifNone: aBlockClosure! !!Supplier methodsFor: 'as yet unclassified' stamp: 'DamianSilvani 7/1/2018 23:30'!customerIdentifiedAs: anIdentificationType numbered: anIdentificationNumber	^customers detect: [ :aCustomer | aCustomer isIdentifiedAs: anIdentificationType numbered: anIdentificationNumber ]! !TestCase subclass: #SupplierImportTest	instanceVariableNames: 'importer system'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!SupplierImportTest methodsFor: 'as yet unclassified' stamp: 'DamianSilvani 7/1/2018 23:31'!assert: aSupplier hasCustomerIdentifiedAs: anIdentificationType numbered: anIdentificationNumber being: aCustomer 	self assert: (aSupplier customerIdentifiedAs: anIdentificationType numbered: anIdentificationNumber) equals: aCustomer ! !!SupplierImportTest methodsFor: 'importing' stamp: 'DamianSilvani 7/1/2018 22:08'!importSuppliersFrom: inputStream	(SupplierImporter from: inputStream using: system) import! !!SupplierImportTest methodsFor: 'test data - address' stamp: 'DamianSilvani 7/1/2018 22:35'!addressRecordWithMoreThanSixFieldsTestData		^ ReadStream on: self alwaysImportedSupplierRecord,'A,San Martin,3322,Olivos,1636,BsAs,y otra cosa'! !!SupplierImportTest methodsFor: 'test data - address' stamp: 'DamianSilvani 7/1/2018 22:34'!addressRecordStartingWithMoreThanOneATestData		^ ReadStream on: self alwaysImportedSupplierRecord,'AA,San Martin,3322,Olivos,1636,BsAs'! !!SupplierImportTest methodsFor: 'test data - address' stamp: 'DamianSilvani 7/1/2018 22:35'!addressRecordWithLessThanSixFieldsTestData		^ ReadStream on: self alwaysImportedSupplierRecord,'A,San Martin,3322,Olivos,1636'! !!SupplierImportTest methodsFor: 'test data - address' stamp: 'DamianSilvani 7/1/2018 22:15'!addressWithoutSupplierTestData		^ ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs'! !!SupplierImportTest methodsFor: 'setup-teardown' stamp: 'DamianSilvani 7/1/2018 21:02'!setUp	system := Environment current createErpSystem.	system start.	system beginTransaction! !!SupplierImportTest methodsFor: 'setup-teardown' stamp: 'DamianSilvani 7/1/2018 20:35'!tearDown	system commit.	system shutdown! !!SupplierImportTest methodsFor: 'asserting' stamp: 'DamianSilvani 7/1/2018 20:35'!assert: customer hasAddressAt: streetName number: streetNumber in: town zipCode: zipCode province: province	| address |		address := customer addressAt: streetName ifNone: [ self fail ].	self assert: address streetName equals: streetName.	self assert: address streetNumber equals: streetNumber.	self assert: address town equals: town.	self assert: address zipCode equals: zipCode.	self assert: address province equals: province.	! !!SupplierImportTest methodsFor: 'asserting' stamp: 'DamianSilvani 7/1/2018 20:35'!assert: customer isNamed: firstName lastName: lastName identfiedAs: idType withNumber: idNumber andNumberOfAddresses: addressesSize	self assert: customer firstName equals: firstName.	self assert: customer lastName equals: lastName.	self assert: customer identificationType equals: idType.	self assert: customer identificationNumber equals: idNumber.	self assert: customer numberOfAddresses equals: addressesSize .! !!SupplierImportTest methodsFor: 'asserting' stamp: 'DamianSilvani 7/1/2018 23:22'!assertImportedSuppliersSizeIsCorrect	self assert: system supplierSystem allSuppliers size equals: 1! !!SupplierImportTest methodsFor: 'asserting' stamp: 'DamianSilvani 7/1/2018 23:29'!assertPepeSanchezWasImportedCorrectlyOn: aSupplier	|customer|	customer := aSupplier customerIdentifiedAs: self alwaysImportedCustomerIdType numbered: self alwaysImportedCustomerIdNumber.		self assert: customer isNamed: 'Pepe' lastName: 'Sanchez' identfiedAs: self alwaysImportedCustomerIdType withNumber: self alwaysImportedCustomerIdNumber andNumberOfAddresses: 0.! !!SupplierImportTest methodsFor: 'asserting' stamp: 'DamianSilvani 7/1/2018 23:29'!assertSupplier1WasImportedCorrectlyWith: anExistingCustomer	| supplier |		supplier := system supplierSystem supplierIdentifiedAs: 'D' numbered: '123'.	self assert: supplier name equals: 'Supplier1'.		self assertPepeSanchezWasImportedCorrectlyOn: supplier.	self assert: supplier hasCustomerIdentifiedAs: 'D' numbered: '5456774' being: anExistingCustomer.		self assert: supplier hasAddressAt: 'San Martin' number: 3322 in: 'Olivos' zipCode: 1636 province: 'BsAs'.	self assert: supplier hasAddressAt: 'Maipu' number: 888 in: 'Florida' zipCode: 1122 province: 'Buenos Aires'! !!SupplierImportTest methodsFor: 'testing' stamp: 'DamianSilvani 7/1/2018 22:48'!testCanNotImportAddressWithoutSupplier	self		should: [ self importSuppliersFrom: self addressWithoutSupplierTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter addressWithoutSupplierErrorDescription.			self assert: system supplierSystem suppliersIsEmpty ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'DamianSilvani 7/1/2018 23:05'!testEmptyLinesAreRecognizedAsInvalidRecords		self		should: [ self importSuppliersFrom: self dataWithEmptyLine ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.			self assert: self alwaysImportedSupplier addressesIsEmpty ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'DamianSilvani 7/1/2018 23:00'!testCanNotImportNewCustomerRecordWithLessThanFiveFields	self		should: [ self				importSuppliersFrom: self newCustomerRecordWithLessThanFiveFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter invalidNewCustomerRecordErrorDescription.			self assert: self alwaysImportedSupplier customersIsEmpty ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'DamianSilvani 7/1/2018 23:09'!testShouldNotImportAddressRecordsStartingWithMoreThanA	self 		should: [ self importSuppliersFrom: self addressRecordStartingWithMoreThanOneATestData ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.			self assert: self alwaysImportedSupplier addressesIsEmpty ]	! !!SupplierImportTest methodsFor: 'testing' stamp: 'DamianSilvani 7/1/2018 23:12'!testShouldNotImportSupplierRecordsStartingWithMoreThanC	self		should: [ self				importSuppliersFrom: self supplierRecordStartingWithMoreThanOneSTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter invalidRecordTypeErrorDescription.			self assert: system supplierSystem suppliersIsEmpty ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'DamianSilvani 7/1/2018 22:33'!testCanNotImportAddressRecordWithLessThanSixFields		self		should: [ self importSuppliersFrom: self addressRecordWithLessThanSixFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter invalidAddressRecordErrorDescription.			self assert: self alwaysImportedSupplier addressesIsEmpty ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'DamianSilvani 7/1/2018 23:02'!testCanNotImportNewCustomerRecordWithMoreThanFiveFields	self		should: [ self				importSuppliersFrom: self newCustomerRecordWithMoreThanFiveFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter invalidNewCustomerRecordErrorDescription.			self assert: self alwaysImportedSupplier customersIsEmpty ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'DamianSilvani 7/1/2018 22:47'!testCanNotImportAddressRecordWithMoreThanSixFields	self 		should: [ self importSuppliersFrom: self addressRecordWithMoreThanSixFieldsTestData ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter invalidAddressRecordErrorDescription.			self assert: self alwaysImportedSupplier addressesIsEmpty ]	! !!SupplierImportTest methodsFor: 'testing' stamp: 'DamianSilvani 7/1/2018 23:29'!testImportSuppliers	|existingCustomer|		existingCustomer := Customer new		firstName: 'John';		lastName: 'Doe';		identificationType: 'D';		identificationNumber: '5456774';		yourself.			system customerSystem add: existingCustomer.		self importSuppliersFrom: self validTestData.	self assertImportedSuppliersSizeIsCorrect.	self assertSupplier1WasImportedCorrectlyWith: existingCustomer! !!SupplierImportTest methodsFor: 'test data - customer' stamp: 'DamianSilvani 7/1/2018 23:07'!newCustomerRecordWithMoreThanFiveFieldsTestData		^ ReadStream on: self alwaysImportedSupplierRecord, '', self alwaysImportedNewCustomerRecord, ',x'! !!SupplierImportTest methodsFor: 'test data - customer' stamp: 'DamianSilvani 7/1/2018 20:35'!alwaysImportedCustomerIdType	^ 'D'! !!SupplierImportTest methodsFor: 'test data - customer' stamp: 'DamianSilvani 7/1/2018 22:52'!newCustomerRecordWithLessThanFiveFieldsTestData		^ ReadStream on: self alwaysImportedSupplierRecord,'NC,Pepe,Sanchez,D'! !!SupplierImportTest methodsFor: 'test data - customer' stamp: 'DamianSilvani 7/1/2018 23:08'!alwaysImportedNewCustomerRecord	^ 'NC,Pepe,Sanchez,', self alwaysImportedCustomerIdType, ',', self alwaysImportedCustomerIdNumber ! !!SupplierImportTest methodsFor: 'test data - customer' stamp: 'DamianSilvani 7/1/2018 20:35'!alwaysImportedCustomerIdNumber	^ '22333444'! !!SupplierImportTest methodsFor: 'test data - customer' stamp: 'DamianSilvani 7/1/2018 23:11'!supplierRecordStartingWithMoreThanOneSTestData		^ ReadStream on: 'SS,Supplier1,D,123'! !!SupplierImportTest methodsFor: 'test data - supplier' stamp: 'DamianSilvani 7/1/2018 22:20'!alwaysImportedSupplierIdType	^'D'! !!SupplierImportTest methodsFor: 'test data - supplier' stamp: 'DamianSilvani 7/1/2018 22:34'!alwaysImportedSupplier	| anIdentificationNumber anIdentifycationType |	anIdentifycationType := self alwaysImportedSupplierIdType.	anIdentificationNumber := self alwaysImportedSupplierIdNumber.	^ system supplierSystem		supplierIdentifiedAs: anIdentifycationType		numbered: anIdentificationNumber! !!SupplierImportTest methodsFor: 'test data - supplier' stamp: 'DamianSilvani 7/1/2018 22:34'!alwaysImportedSupplierRecord	^ 'S,Supplier1,', self alwaysImportedSupplierIdType, ',', self alwaysImportedSupplierIdNumber ! !!SupplierImportTest methodsFor: 'test data - supplier' stamp: 'DamianSilvani 7/1/2018 22:20'!alwaysImportedSupplierIdNumber	^'123'! !!SupplierImportTest methodsFor: 'test data' stamp: 'DamianSilvani 7/1/2018 20:59'!validTestData	^ ReadStream on: 'S,Supplier1,D,123NC,Pepe,Sanchez,D,22333444EC,D,5456774A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos Aires'! !!SupplierImportTest methodsFor: 'test data' stamp: 'DamianSilvani 7/1/2018 23:09'!dataWithEmptyLine		^ ReadStream on: self alwaysImportedSupplierRecord,'A,San Martin,3322,Olivos,1636,BsAs'! !Object subclass: #SupplierImporter	instanceVariableNames: 'line readStream record system newSupplier newCustomer'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!SupplierImporter methodsFor: 'importing - private - address' stamp: 'DamianSilvani 7/1/2018 20:40'!assertValidAddressRecordSize		record size ~= 6 ifTrue: [ self signalInvalidAddressRecord ].	! !!SupplierImporter methodsFor: 'importing - private - address' stamp: 'DamianSilvani 7/1/2018 22:41'!importAddress	| newAddress |	self assertThereIsSupplierForAddress.	self assertValidAddressRecordSize.		newAddress := Address new.	newAddress streetName: record second.	newAddress streetNumber: record third asInteger.	newAddress town: record fourth.	newAddress zipCode: record fifth asInteger.	newAddress province: record sixth.	^ newSupplier addAddress: newAddress! !!SupplierImporter methodsFor: 'importing - private - address' stamp: 'DamianSilvani 7/1/2018 20:40'!isAddressRecord	^ record first = 'A'! !!SupplierImporter methodsFor: 'importing - private - address' stamp: 'DamianSilvani 7/1/2018 22:43'!assertThereIsSupplierForAddress	newSupplier isNil ifTrue: [ self signalAddressWithoutSupplierError ].	! !!SupplierImporter methodsFor: 'importing' stamp: 'DamianSilvani 7/1/2018 20:40'!import	[ self canImportNextLine ] whileTrue: [ 		self convertLineToRecord.		self importRecord ]! !!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'DamianSilvani 7/1/2018 22:58'!assertValidNewCustomerRecordSize		record size ~= 5 ifTrue: [ self signalInvalidNewCustomerRecord ].! !!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'DamianSilvani 7/1/2018 22:09'!isSupplierRecord	^ record first = 'S'! !!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'DamianSilvani 7/1/2018 22:12'!isNewCustomerRecord	^ record first = 'NC'! !!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'DamianSilvani 7/1/2018 22:36'!importSupplier	self assertValidSupplierRecordSize.		newSupplier := Supplier new.	newSupplier name: record second.	newSupplier identificationType: record third.	newSupplier identificationNumber: record fourth.		system supplierSystem add: newSupplier! !!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'DamianSilvani 7/1/2018 23:17'!importExistingCustomer	|existingCustomer identificationType identificationNumber|		self assertThereIsSupplierForCustomer.	self assertValidExistingCustomerRecordSize.		identificationType := record second.	identificationNumber := record third.		existingCustomer := system customerSystem customerIdentifiedAs: identificationType numbered: identificationNumber.	newSupplier addCustomer: existingCustomer ! !!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'DamianSilvani 7/1/2018 22:13'!isExistingCustomerRecord	^ record first = 'EC'! !!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'DamianSilvani 7/1/2018 22:56'!assertThereIsSupplierForCustomer	newSupplier isNil ifTrue: [ self signalCustomerWithoutSupplierError ].! !!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'DamianSilvani 7/1/2018 23:15'!importNewCustomer	self assertThereIsSupplierForCustomer.	self assertValidNewCustomerRecordSize.		newCustomer := Customer new.	newCustomer firstName: record second.	newCustomer lastName: record third.	newCustomer identificationType: record fourth.	newCustomer identificationNumber: record fifth.		system customerSystem add: newCustomer.	newSupplier addCustomer: newCustomer! !!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'DamianSilvani 7/1/2018 22:38'!assertValidSupplierRecordSize		record size ~= 4 ifTrue: [ self signalInvalidSupplierRecord ].! !!SupplierImporter methodsFor: 'error signal' stamp: 'DamianSilvani 7/1/2018 22:44'!signalAddressWithoutSupplierError	self error: self class addressWithoutSupplierErrorDescription.! !!SupplierImporter methodsFor: 'error signal' stamp: 'DamianSilvani 7/1/2018 22:44'!signalInvalidSupplierRecord 		self error: self class invalidSupplierRecordErrorDescription ! !!SupplierImporter methodsFor: 'error signal' stamp: 'DamianSilvani 7/1/2018 20:40'!signalInvalidRecordType	self error: self class invalidRecordTypeErrorDescription! !!SupplierImporter methodsFor: 'error signal' stamp: 'DamianSilvani 7/1/2018 20:40'!signalInvalidAddressRecord 		self error: self class invalidAddressRecordErrorDescription ! !!SupplierImporter methodsFor: 'initialization' stamp: 'DamianSilvani 7/1/2018 22:43'!initializeOn: aReadStream using: anErpSystem	readStream := aReadStream.	system := anErpSystem! !!SupplierImporter methodsFor: 'importing - private' stamp: 'DamianSilvani 7/1/2018 20:40'!convertLineToRecord	record := line substrings: {$,}.		self assertRecordNotEmpty! !!SupplierImporter methodsFor: 'importing - private' stamp: 'DamianSilvani 7/1/2018 22:12'!importRecord		self isSupplierRecord ifTrue: [ ^self importSupplier ].	self isNewCustomerRecord ifTrue: [ ^self importNewCustomer ].	self isExistingCustomerRecord ifTrue: [ ^self importExistingCustomer ].		self isAddressRecord ifTrue: [ ^self importAddress ].		self signalInvalidRecordType! !!SupplierImporter methodsFor: 'importing - private' stamp: 'DamianSilvani 7/1/2018 20:40'!canImportNextLine	line := readStream nextLine.	^ line notNil! !!SupplierImporter methodsFor: 'importing - private' stamp: 'DamianSilvani 7/1/2018 20:40'!assertRecordNotEmpty		record isEmpty ifTrue: [ self signalInvalidRecordType ]! !!SupplierImporter methodsFor: 'signalling' stamp: 'DamianSilvani 7/1/2018 22:58'!signalInvalidNewCustomerRecord	self error: self class invalidNewCustomerRecordErrorDescription ! !!SupplierImporter methodsFor: 'signalling' stamp: 'DamianSilvani 7/1/2018 23:17'!signalInvalidExistingCustomerRecord	self error: self class invalidExistingCustomerRecordErrorDescription ! !!SupplierImporter methodsFor: 'asserting' stamp: 'DamianSilvani 7/1/2018 23:17'!assertValidExistingCustomerRecordSize	record size ~= 3 ifTrue: [ self signalInvalidExistingCustomerRecord ].! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SupplierImporter class	instanceVariableNames: ''!!SupplierImporter class methodsFor: 'instance creation' stamp: 'DamianSilvani 7/1/2018 22:44'!from: aReadStream using: anErpSystem	^ self new initializeOn: aReadStream using: anErpSystem! !!SupplierImporter class methodsFor: 'as yet unclassified' stamp: 'DamianSilvani 7/1/2018 22:59'!invalidNewCustomerRecordErrorDescription	^'Invalid New Customer record'! !!SupplierImporter class methodsFor: 'as yet unclassified' stamp: 'DamianSilvani 7/1/2018 23:18'!invalidExistingCustomerRecordErrorDescription	^'Invalid Existing Customer record'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'DamianSilvani 7/1/2018 20:40'!invalidRecordTypeErrorDescription		^'Invalid record type'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'DamianSilvani 7/1/2018 22:44'!addressWithoutSupplierErrorDescription		^'There is no Supplier for the imported address'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'DamianSilvani 7/1/2018 22:44'!invalidSupplierRecordErrorDescription		^'Invalid Supplier record'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'DamianSilvani 7/1/2018 20:40'!invalidAddressRecordErrorDescription		^'Invalid address record'! !Object subclass: #SupplierSystem	instanceVariableNames: 'erpSystem'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!SupplierSystem methodsFor: 'system live cycle' stamp: 'DamianSilvani 7/1/2018 20:57'!shutdown	self subclassResponsibility! !!SupplierSystem methodsFor: 'system live cycle' stamp: 'DamianSilvani 7/1/2018 20:57'!start	self subclassResponsibility! !!SupplierSystem methodsFor: 'system live cycle' stamp: 'DamianSilvani 7/2/2018 14:46'!initializeOn: anErpSystem	erpSystem := anErpSystem! !!SupplierSystem methodsFor: 'customers' stamp: 'DamianSilvani 7/1/2018 20:57'!add: aCustomer	self subclassResponsibility! !!SupplierSystem methodsFor: 'customers' stamp: 'DamianSilvani 7/1/2018 22:49'!suppliersIsEmpty	self subclassResponsibility! !!SupplierSystem methodsFor: 'customers' stamp: 'DamianSilvani 7/1/2018 22:49'!allSuppliers	self subclassResponsibility! !!SupplierSystem methodsFor: 'customers' stamp: 'DamianSilvani 7/1/2018 20:57'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber	self subclassResponsibility! !!SupplierSystem methodsFor: 'transaction' stamp: 'DamianSilvani 7/1/2018 20:57'!beginTransaction	self subclassResponsibility! !!SupplierSystem methodsFor: 'transaction' stamp: 'DamianSilvani 7/1/2018 20:57'!commit	self subclassResponsibility! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SupplierSystem class	instanceVariableNames: ''!!SupplierSystem class methodsFor: 'instance creation' stamp: 'DamianSilvani 7/2/2018 14:46'!on: anErpSystem	^self new initializeOn: anErpSystem! !SupplierSystem subclass: #PersistentSupplierSystem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!PersistentSupplierSystem methodsFor: 'customers' stamp: 'DamianSilvani 7/2/2018 17:27'!add: aSupplier	erpSystem session persist: aSupplier! !!PersistentSupplierSystem methodsFor: 'customers' stamp: 'DamianSilvani 7/2/2018 17:30'!supplierIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber	| suppliers |	suppliers := erpSystem session		select: [ :aSupplier | 			aSupplier identificationType = anIdentifycationType				and: [ aSupplier identificationNumber = anIdentificationNumber ] ]		ofType: Supplier.	suppliers size = 1		ifFalse: [ self error: 'More that one Supplier found' ].	^ suppliers anyOne! !!PersistentSupplierSystem methodsFor: 'customers' stamp: 'DamianSilvani 7/1/2018 22:49'!suppliersIsEmpty	^ self allSuppliers isEmpty! !!PersistentSupplierSystem methodsFor: 'customers' stamp: 'DamianSilvani 7/2/2018 17:33'!allSuppliers	^ erpSystem session selectAllOfType: Supplier! !!PersistentSupplierSystem methodsFor: 'system live cycle' stamp: 'DamianSilvani 7/2/2018 14:46'!shutdown	erpSystem session shutdown! !!PersistentSupplierSystem methodsFor: 'system live cycle' stamp: 'DamianSilvani 7/2/2018 14:46'!start	erpSystem session start! !!PersistentSupplierSystem methodsFor: 'transaction' stamp: 'DamianSilvani 7/2/2018 14:45'!beginTransaction	erpSystem session beginTransaction! !!PersistentSupplierSystem methodsFor: 'transaction' stamp: 'DamianSilvani 7/2/2018 14:45'!commit	erpSystem session commit! !CustomerSystem subclass: #TransientCustomerSystem	instanceVariableNames: 'customers'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!TransientCustomerSystem methodsFor: 'customers' stamp: 'HernanWilkinson 11/4/2016 09:39'!add: aCustomer	customers add: aCustomer! !!TransientCustomerSystem methodsFor: 'customers' stamp: 'DamianSilvani 7/2/2018 17:16'!customersIsEmpty	^ customers isEmpty ! !!TransientCustomerSystem methodsFor: 'customers' stamp: 'DamianSilvani 7/2/2018 17:21'!allCustomers	^ customers copy! !!TransientCustomerSystem methodsFor: 'customers' stamp: 'HernanWilkinson 11/4/2016 09:40'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber		^customers detect: [ :aCustomer | aCustomer isIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ]! !!TransientCustomerSystem methodsFor: 'initialization' stamp: 'HernanWilkinson 11/4/2016 09:41'!initialize		customers := OrderedCollection new! !!TransientCustomerSystem methodsFor: 'transaction' stamp: 'HernanWilkinson 11/4/2016 09:39'!beginTransaction		! !!TransientCustomerSystem methodsFor: 'transaction' stamp: 'HernanWilkinson 11/4/2016 09:39'!commit		! !!TransientCustomerSystem methodsFor: 'system live cycle' stamp: 'HernanWilkinson 11/4/2016 09:52'!shutdown		! !!TransientCustomerSystem methodsFor: 'system live cycle' stamp: 'HernanWilkinson 11/4/2016 09:51'!start	! !ErpSystem subclass: #TransientErpSystem	instanceVariableNames: 'customerSystem supplierSystem'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!TransientErpSystem methodsFor: 'transaction' stamp: 'DamianSilvani 7/1/2018 21:26'!beginTransaction		! !!TransientErpSystem methodsFor: 'transaction' stamp: 'DamianSilvani 7/1/2018 21:26'!commit		! !!TransientErpSystem methodsFor: 'system live cycle' stamp: 'DamianSilvani 7/2/2018 14:42'!start	supplierSystem := TransientSupplierSystem on: self.	customerSystem := TransientCustomerSystem on: self	! !!TransientErpSystem methodsFor: 'system live cycle' stamp: 'DamianSilvani 7/1/2018 21:26'!shutdown		! !!TransientErpSystem methodsFor: 'system live cycle' stamp: 'DamianSilvani 7/1/2018 22:06'!supplierSystem	^supplierSystem! !!TransientErpSystem methodsFor: 'system live cycle' stamp: 'DamianSilvani 7/1/2018 22:05'!customerSystem	^customerSystem! !SupplierSystem subclass: #TransientSupplierSystem	instanceVariableNames: 'suppliers'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!TransientSupplierSystem methodsFor: 'initialization' stamp: 'DamianSilvani 7/1/2018 22:22'!initialize		suppliers := OrderedCollection new! !!TransientSupplierSystem methodsFor: 'as yet unclassified' stamp: 'DamianSilvani 7/1/2018 22:21'!supplierIdentifiedAs: anIdentificationType numbered: anIdentificationNumber	^suppliers detect: [ :aSupplier | aSupplier isIdentifiedAs: anIdentificationType numbered: anIdentificationNumber ]! !!TransientSupplierSystem methodsFor: 'customers' stamp: 'DamianSilvani 7/1/2018 22:49'!allSuppliers	^ suppliers copy! !!TransientSupplierSystem methodsFor: 'customers' stamp: 'DamianSilvani 7/1/2018 22:49'!suppliersIsEmpty	^ suppliers isEmpty ! !!TransientSupplierSystem methodsFor: 'customers' stamp: 'DamianSilvani 7/1/2018 22:23'!add: aSupplier	suppliers add: aSupplier! !!TransientSupplierSystem methodsFor: 'transaction' stamp: 'DamianSilvani 7/1/2018 20:57'!beginTransaction		! !!TransientSupplierSystem methodsFor: 'transaction' stamp: 'DamianSilvani 7/1/2018 20:57'!commit		! !!TransientSupplierSystem methodsFor: 'system live cycle' stamp: 'DamianSilvani 7/1/2018 20:57'!shutdown		! !!TransientSupplierSystem methodsFor: 'system live cycle' stamp: 'DamianSilvani 7/1/2018 20:57'!start	! !