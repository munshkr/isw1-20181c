Object subclass: #Address	instanceVariableNames: 'id streetName streetNumber town zipCode province'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Address methodsFor: 'as yet unclassified' stamp: 'HernanWilkinson 11/1/2016 10:06'!isAt: aStreetName	^streetName = aStreetName ! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:11'!province	^province! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:08'!province: aProvince 	province := aProvince	! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:07'!town: aTown 	town := aTown! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:12'!town	^town! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetNumber: aStreetNumber 	streetNumber := aStreetNumber ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetName	^streetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetName: aStreetName 	streetName := aStreetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetNumber	^streetNumber ! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:13'!zipCode	^zipCode! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:08'!zipCode: aZipCode 	zipCode := aZipCode! !Object subclass: #Customer	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Customer methodsFor: 'initialization' stamp: 'HernanWilkinson 10/28/2016 13:26'!initialize	super initialize.	addresses := OrderedCollection new.! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 11/1/2016 09:43'!numberOfAddresses		^addresses size! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:27'!addAddress: anAddress 	addresses add: anAddress ! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:25'!addresses	^ addresses! !!Customer methodsFor: 'as yet unclassified' stamp: 'HernanWilkinson 11/1/2016 10:05'!addressAt: aStreetName ifNone: noneClosure 		^addresses detect: [ :anAddress | anAddress isAt: aStreetName ] ifNone: noneClosure ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!firstName: aName 	firstName := aName! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!lastName: aLastName 	lastName := aLastName! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!lastName	^lastName ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!firstName		^firstName ! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationType		^identificationType ! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 13:10'!identificationType: anIdentificationType 	identificationType := anIdentificationType! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationNumber		^identificationNumber ! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 13:10'!identificationNumber: anIdentificationNumber 	identificationNumber := anIdentificationNumber! !TestCase subclass: #CustomerImportTest	instanceVariableNames: 'session importer'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CustomerImportTest methodsFor: 'test data' stamp: 'DamianSilvani 6/24/2018 18:52'!invalidTestDataWithInvalidLine	^ ReadStream		on:'C,Juan,Perez,C,23-25666777-9XXXC,Pepe,Sanchez,D,22333444'! !!CustomerImportTest methodsFor: 'test data' stamp: 'HernanWilkinson 11/1/2016 15:17'!validTestData	^ ReadStream on:'C,Pepe,Sanchez,D,22333444A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !!CustomerImportTest methodsFor: 'test data' stamp: 'DamianSilvani 6/24/2018 19:03'!invalidTestDataWithInvalidStreetNumber	^ ReadStream on:'C,Pepe,Sanchez,D,22333444A,San Martin,INVALIDNUMBER,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'test data' stamp: 'DamianSilvani 6/24/2018 18:48'!invalidTestDataWithUnexpectedAddressLine	^ ReadStream		on:			'A,San Martin,3322,Olivos,1636,BsAsC,Juan,Perez,C,23-25666777-9'! !!CustomerImportTest methodsFor: 'test data' stamp: 'DamianSilvani 6/24/2018 19:05'!invalidTestDataWithInvalidZipCode	^ ReadStream on:'C,Pepe,Sanchez,D,22333444A,San Martin,2345,Olivos,INVALIDZIPCODE,BsAs'! !!CustomerImportTest methodsFor: 'test data' stamp: 'DamianSilvani 6/24/2018 18:51'!invalidTestDataWithInvalidNumberOfAddressFields	^ ReadStream on:'C,Pepe,Sanchez,D,22333444A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos Aires,XXXXXC,Juan,Perez,C,23-25666777-9'! !!CustomerImportTest methodsFor: 'test data' stamp: 'DamianSilvani 6/24/2018 18:48'!invalidTestDataWithInvalidNumberOfCustomerFields^ ReadStream		on:			'C,Pepe,SanchezA,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos Aires'! !!CustomerImportTest methodsFor: 'importing' stamp: 'HernanWilkinson 11/1/2016 15:17'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber		|customers |		customers := session 		select: [ :aCustomer | aCustomer identificationType = anIdentifycationType and: [ aCustomer identificationNumber = anIdentificationNumber ] ]		ofType: Customer.			self assert: customers size equals: 1.		^customers anyOne.! !!CustomerImportTest methodsFor: 'importing' stamp: 'HernanWilkinson 11/1/2016 15:21'!importCustomersFrom: inputStream on: aSession		CustomerImporter new importFrom: inputStream on: aSession! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 11:00'!assert: customer hasAddressAt: streetName number: streetNumber in: town zipCode: zipCode province: province	| address |		address := customer addressAt: streetName ifNone: [ self fail ].	self assert: address streetName equals: streetName.	self assert: address streetNumber equals: streetNumber.	self assert: address town equals: town.	self assert: address zipCode equals: zipCode.	self assert: address province equals: province.	! !!CustomerImportTest methodsFor: 'asserting' stamp: 'DamianSilvani 6/24/2018 18:57'!assertJuanPerezWasImportedCorrectlyWithoutAddress		| customer idType idNumber |		idType := 'C'.	idNumber := '23-25666777-9'.	customer := self customerIdentifiedAs: idType numbered: idNumber.		self assert: customer isNamed: 'Juan' lastName: 'Perez' identfiedAs: idType withNumber: idNumber andNumberOfAddresses: 0.	! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 15:14'!assertJuanPerezWasImportedCorrectly		| customer idType idNumber |		idType := 'C'.	idNumber := '23-25666777-9'.	customer := self customerIdentifiedAs: idType numbered: idNumber.		self assert: customer isNamed: 'Juan' lastName: 'Perez' identfiedAs: idType withNumber: idNumber andNumberOfAddresses: 1.	self assert: customer hasAddressAt: 'Alem' number: 1122 in: 'CABA' zipCode: 1001 province: 'CABA'.	! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 10:56'!assert: customer isNamed: firstName lastName: lastName identfiedAs: idType withNumber: idNumber andNumberOfAddresses: addressesSize	self assert: customer firstName equals: firstName.	self assert: customer lastName equals: lastName.	self assert: customer identificationType equals: idType.	self assert: customer identificationNumber equals: idNumber.	self assert: customer numberOfAddresses equals: addressesSize .! !!CustomerImportTest methodsFor: 'asserting' stamp: 'DamianSilvani 6/24/2018 18:58'!assertPepeSanchezWasImportedCorrectlyWithOneAddress	| customer idType idNumber |	idType := 'D'.	idNumber := '22333444'.	customer := self customerIdentifiedAs: idType numbered: idNumber.		self assert: customer isNamed: 'Pepe' lastName: 'Sanchez' identfiedAs: idType withNumber: idNumber andNumberOfAddresses: 1.	self assert: customer hasAddressAt: 'San Martin' number: 3322 in: 'Olivos' zipCode: 1636 province: 'BsAs'.! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 15:16'!assertPepeSanchezWasImportedCorrectly	| customer idType idNumber |	idType := 'D'.	idNumber := '22333444'.	customer := self customerIdentifiedAs: idType numbered: idNumber.		self assert: customer isNamed: 'Pepe' lastName: 'Sanchez' identfiedAs: idType withNumber: idNumber andNumberOfAddresses: 2.	self assert: customer hasAddressAt: 'San Martin' number: 3322 in: 'Olivos' zipCode: 1636 province: 'BsAs'.	self assert: customer hasAddressAt: 'Maipu' number: 888 in: 'Florida' zipCode: 1122 province: 'Buenos Aires'! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 15:13'!assertImportedCustomersSizeIsCorrect		self assert: (session selectAllOfType: Customer) size equals: 2.	! !!CustomerImportTest methodsFor: 'testing' stamp: 'DamianSilvani 6/24/2018 19:05'!testImportErrorOnInvalidZipCode	self		should: [ self importCustomersFrom: self invalidTestDataWithInvalidZipCode on: session ]		raise: Error - MessageNotUnderstood		withExceptionDo:			[ :anError |				self assert: anError messageText equals: CustomerImporter invalidZipCodeErrorMessage ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'DamianSilvani 6/24/2018 18:48'!testImportErrorOnUnexpectedAddressLine	self		should: [ self importCustomersFrom: self invalidTestDataWithUnexpectedAddressLine on: session ]		raise: Error - MessageNotUnderstood		withExceptionDo:			[ :anError |				self assert: anError messageText equals: CustomerImporter unexpectedAddressLineErrorMessage ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'DamianSilvani 6/24/2018 18:59'!testImportErrorOnInvalidNumberOfCustomerFields	self		should: [ self importCustomersFrom: self invalidTestDataWithInvalidNumberOfCustomerFields on: session ]		raise: Error - MessageNotUnderstood		withExceptionDo:			[ :anError |				self assert: anError messageText equals: CustomerImporter invalidNumberOfCustomerFieldsErrorMessage ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'DamianSilvani 6/24/2018 18:58'!testImportErrorOnInvalidNumberOfAddressFields	self		should: [ self importCustomersFrom: self invalidTestDataWithInvalidNumberOfAddressFields on: session ]		raise: Error - MessageNotUnderstood		withExceptionDo:			[ :anError |				self assert: anError messageText equals: CustomerImporter invalidNumberOfAddressFieldsErrorMessage.				self assertPepeSanchezWasImportedCorrectlyWithOneAddress ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'DamianSilvani 6/24/2018 18:57'!testImportErrorOnInvalidLine	self		should: [ self importCustomersFrom: self invalidTestDataWithInvalidLine on: session ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError |			self assert: anError messageText equals: CustomerImporter invalidLineErrorMessage.			self assertJuanPerezWasImportedCorrectlyWithoutAddress ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/1/2016 15:20'!testImportCustomers	self importCustomersFrom: self validTestData on: session.	self assertImportedCustomersSizeIsCorrect.	self assertPepeSanchezWasImportedCorrectly.	self assertJuanPerezWasImportedCorrectly! !!CustomerImportTest methodsFor: 'testing' stamp: 'DamianSilvani 6/24/2018 19:02'!testImportErrorOnInvalidStreetNumber	self		should: [ self importCustomersFrom: self invalidTestDataWithInvalidStreetNumber on: session ]		raise: Error - MessageNotUnderstood		withExceptionDo:			[ :anError |				self assert: anError messageText equals: CustomerImporter invalidStreetNumberErrorMessage ]! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'HernanWilkinson 11/1/2016 15:24'!setUp	session := DataBaseSession for: (Array with: self addressMapping with: self customerMapping).	session open.	session beginTransaction! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'HernanWilkinson 11/1/2016 15:23'!addressMapping	^ ClassMapping		withDefaultTableNameFor: Address		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #streetName)				with: (EmbededMapping withDefaultFieldNameFor: #streetNumber)				with: (EmbededMapping withDefaultFieldNameFor: #town)				with: (EmbededMapping withDefaultFieldNameFor: #zipCode)				with: (EmbededMapping withDefaultFieldNameFor: #province))! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'HernanWilkinson 11/1/2016 15:23'!tearDown	session commit.	session close! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'HernanWilkinson 11/1/2016 15:24'!customerMapping	^ ClassMapping		withDefaultTableNameFor: Customer		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #firstName)				with: (EmbededMapping withDefaultFieldNameFor: #lastName)				with: (EmbededMapping withDefaultFieldNameFor: #identificationType)				with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)				with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address))! !Object subclass: #CustomerImporter	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CustomerImporter methodsFor: 'assertions' stamp: 'DamianSilvani 6/24/2018 18:46'!assertValidNumberOfCustomerFieldsOn: aCollection	self assert: (aCollection size = 5)		description: CustomerImporter invalidNumberOfCustomerFieldsErrorMessage! !!CustomerImporter methodsFor: 'assertions' stamp: 'DamianSilvani 6/24/2018 18:20'!assertValidLine: aString	self		assert: [ (aString beginsWith: 'C') | (aString beginsWith: 'A') ]		description: CustomerImporter invalidLineErrorMessage! !!CustomerImporter methodsFor: 'assertions' stamp: 'DamianSilvani 6/24/2018 19:09'!assertValidStreetNumber: aStreetNumberString 	self assert: (aStreetNumberString isAllDigits) description: CustomerImporter invalidStreetNumberErrorMessage! !!CustomerImporter methodsFor: 'assertions' stamp: 'DamianSilvani 6/24/2018 18:54'!assertValidNumberOfAddressFieldsOn: aCollection 	self assert: (aCollection size = 6) description: CustomerImporter invalidNumberOfAddressFieldsErrorMessage ! !!CustomerImporter methodsFor: 'assertions' stamp: 'DamianSilvani 6/24/2018 19:09'!assertValidZipCode: aZipCodeString	self assert: (aZipCodeString isAllDigits) description: CustomerImporter invalidZipCodeErrorMessage! !!CustomerImporter methodsFor: 'importing' stamp: 'DamianSilvani 6/24/2018 19:07'!importFrom: inputStream on: aSession	"	self importCustomers	"	| newCustomer line |	line := inputStream nextLine.	[ line notNil ]		whileTrue: [ self assertValidLine: line.			(line beginsWith: 'C')				ifTrue: [ | customerData |					customerData := line substrings: {$,}.					self assertValidNumberOfCustomerFieldsOn: customerData.					newCustomer := Customer new.					newCustomer firstName: customerData second.					newCustomer lastName: customerData third.					newCustomer identificationType: customerData fourth.					newCustomer identificationNumber: customerData fifth.					aSession persist: newCustomer ].			(line beginsWith: 'A')				ifTrue: [ | addressData newAddress |					self						assert: newCustomer notNil						description: CustomerImporter unexpectedAddressLineErrorMessage.					addressData := line substrings: {$,}.					self assertValidNumberOfAddressFieldsOn: addressData.					newAddress := Address new.					newAddress streetName: addressData second.					self assertValidStreetNumber: addressData third.					newAddress streetNumber: addressData third asInteger.					newAddress town: addressData fourth.					self assertValidZipCode: addressData fifth.										newAddress zipCode: addressData fifth asInteger.					newAddress province: addressData sixth.					newCustomer addAddress: newAddress ].			line := inputStream nextLine ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CustomerImporter class	instanceVariableNames: ''!!CustomerImporter class methodsFor: 'error messages' stamp: 'DamianSilvani 6/24/2018 19:05'!invalidStreetNumberErrorMessage	^'invalid street number'! !!CustomerImporter class methodsFor: 'error messages' stamp: 'DamianSilvani 6/24/2018 19:06'!invalidZipCodeErrorMessage	^'invalid Zip code'! !!CustomerImporter class methodsFor: 'error messages' stamp: 'DamianSilvani 6/24/2018 18:16'!invalidLineErrorMessage	^ 'invalid line'! !!CustomerImporter class methodsFor: 'error messages' stamp: 'DamianSilvani 6/24/2018 18:46'!invalidNumberOfCustomerFieldsErrorMessage	^'invalid number of Customer fields'! !!CustomerImporter class methodsFor: 'error messages' stamp: 'DamianSilvani 6/24/2018 18:54'!invalidNumberOfAddressFieldsErrorMessage	^'invalid number of Address fields'! !!CustomerImporter class methodsFor: 'error messages' stamp: 'DamianSilvani 6/24/2018 18:27'!unexpectedAddressLineErrorMessage	^'unexpected address line'! !